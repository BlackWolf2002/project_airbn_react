import axios from "axios";

const API_BASE_URL = "https://airbnbnew.cybersoft.edu.vn/";
const TOKEN_CYBERSOFT =
    "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5Mb3AiOiJOb2RlanMgNDgiLCJIZXRIYW5TdHJpbmciOiIxNi8wOC8yMDI1IiwiSGV0SGFuVGltZSI6IjE3NTUzMDI0MDAwMDAiLCJuYmYiOjE3MzU5MjM2MDAsImV4cCI6MTc1NTQ1MDAwMH0.qhz1imNFTn5VsERO5GZAfbkm944w0Vguuy5WQFo_d0Y";

export const fetchRooms = async (
    pageIndex = 1,
    pageSize = 10,
    keyword = ""
) => {
    try {
        const response = await axios.get(
            `${API_BASE_URL}api/phong-thue/phan-trang-tim-kiem`,
            {
                params: {
                    pageIndex, // S·ªë trang
                    pageSize, // S·ªë l∆∞·ª£ng m·ª•c tr√™n m·ªói trang
                    keyword, // T·ª´ kh√≥a t√¨m ki·∫øm (c√≥ th·ªÉ r·ªóng)
                },
                headers: {
                    Authorization: `Bearer ${localStorage.getItem("token")}`,
                    tokenCybersoft: TOKEN_CYBERSOFT,
                    "Content-Type": "application/json",
                },
            }
        );

        console.log("Ph·∫£n h·ªìi API:", response.data);
        return response.data; // Tr·∫£ v·ªÅ to√†n b·ªô ph·∫£n h·ªìi
    } catch (error) {
        console.error(
            "L·ªói khi l·∫•y d·ªØ li·ªáu ph√≤ng:",
            error.response?.data || error.message
        );
        throw error.response?.data || error;
    }
};

// H√†m th√™m ph√≤ng
export const addRoom = async (roomData) => {
    try {
        const token = localStorage.getItem("token"); // Token user sau khi ƒëƒÉng nh·∫≠p
        if (!token) {
            throw new Error(
                "‚ùå Token user kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i."
            );
        }

        const headers = {
            token: token, // Token c·ªßa user
            TokenCybersoft: TOKEN_CYBERSOFT, // Token c·ªë ƒë·ªãnh c·ªßa Cybersoft
            "Content-Type": "application/json-patch+json", // Ki·ªÉu d·ªØ li·ªáu y√™u c·∫ßu c·ªßa API
        };

        console.log("üì¢ Token ƒëang s·ª≠ d·ª•ng:", token);
        console.log("üì¢ D·ªØ li·ªáu th√™m ph√≤ng:", roomData);

        const response = await axios.post(
            `${API_BASE_URL}api/phong-thue`,
            roomData,
            { headers }
        );

        console.log("‚úÖ Ph√≤ng ƒë∆∞·ª£c th√™m th√†nh c√¥ng:", response.data);
        //Sau khi th√™m ph√≤ng,g·ªçi l·∫°i API ƒë·ªÉ l·∫•y danh s√°ch m·ªõi
        if (fetchRooms) {
            await fetchRooms();
        }
        return response.data;
    } catch (error) {
        console.error("‚ùå L·ªói khi th√™m ph√≤ng:", error.response?.data || error);
        throw error.response?.data || error;
    }
};

// H√†m c·∫≠p nh·∫≠t ph√≤ng
export const updateRoom = async (id, roomData) => {
    try {
        const token = localStorage.getItem("token");
        const response = await axios.put(
            `${API_BASE_URL}api/phong-thue/${id}`,
            roomData,
            {
                headers: {
                    token: token,
                    TokenCybersoft: TOKEN_CYBERSOFT,
                    "Content-Type": "application/json-patch+json",
                },
            }
        );

        console.log("Ph√≤ng ƒë∆∞·ª£c c·∫≠p nh·∫≠t:", response.data);
        // Sau khi th√™m ph√≤ng, g·ªçi l·∫°i API ƒë·ªÉ l·∫•y danh s√°ch m·ªõi
        if (fetchRooms) {
            await fetchRooms();
        }
        return response.data;
    } catch (error) {
        console.error(
            "L·ªói khi c·∫≠p nh·∫≠t ph√≤ng:",
            error.response?.data || error.message
        );
        throw error.response?.data || error;
    }
};

// H√†m x√≥a ph√≤ng
export const deleteRoom = async (id) => {
    try {
        const token = localStorage.getItem("token");
        if (!token) {
            throw new Error(
                "‚ùå Token user kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i."
            );
        }

        const response = await axios.delete(
            `${API_BASE_URL}api/phong-thue/${id}`,
            {
                headers: {
                    token: token,
                    TokenCybersoft: TOKEN_CYBERSOFT,
                    "Content-Type": "application/json",
                },
            }
        );

        console.log("‚úÖ API ph·∫£n h·ªìi sau khi x√≥a:", response.data);
        return response.data;
    } catch (error) {
        console.error("‚ùå L·ªói khi x√≥a ph√≤ng:", error.response?.data || error);
        throw error.response?.data || error;
    }
};
