import React, { useState } from "react";
import { Form, Input, Button, Upload, message } from "antd";
import { UploadOutlined } from "@ant-design/icons";
import {
    addLocation,
    updateLocation,
    uploadLocationImage,
} from "../api/locationService";

const ViTriForm = ({ location, onClose }) => {
    const [form] = Form.useForm();
    const [loading, setLoading] = useState(false);
    const [image, setImage] = useState(null);
    const [currentLocation, setCurrentLocation] = useState(location || null);

    const handleSubmit = async (values) => {
        setLoading(true);
        try {
            let imageUrl = image;

            // Ki·ªÉm tra n·∫øu hinhAnh l√† m·∫£ng th√¨ l·∫•y ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n
            if (Array.isArray(imageUrl)) {
                imageUrl = imageUrl.length > 0 ? imageUrl[0] : "";
            }

            if (location) {
                await updateLocation(location.id, {
                    ...values,
                    hinhAnh: imageUrl, // Ch·ªâ g·ª≠i m·ªôt ƒë∆∞·ªùng link h√¨nh ·∫£nh
                });
            } else {
                const locationData = await addLocation({
                    ...values,
                    hinhAnh: "",
                });
                setLocation(locationData.content);
            }

            message.success(
                location
                    ? "C·∫≠p nh·∫≠t v·ªã tr√≠ th√†nh c√¥ng!"
                    : "Th√™m v·ªã tr√≠ th√†nh c√¥ng!"
            );
            onClose();
        } catch (error) {
            console.error("L·ªói khi l∆∞u v·ªã tr√≠:", error);
            message.error("C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i!");
        } finally {
            setLoading(false);
        }
    };

    const handleImageUpload = async ({ file }) => {
        try {
            if (!file) {
                message.error("Vui l√≤ng ch·ªçn file ·∫£nh!");
                return;
            }

            if (!location || !location.id) {
                message.error(
                    "Kh√¥ng th·ªÉ t·∫£i ·∫£nh l√™n! ID v·ªã tr√≠ kh√¥ng t·ªìn t·∫°i."
                );
                return;
            }

            console.log("üì§ ƒêang t·∫£i l√™n ·∫£nh:", file);

            const response = await uploadLocationImage(location.id, file);
            console.log("‚úÖ ·∫¢nh ƒë√£ t·∫£i l√™n API:", response);

            if (response.content) {
                setImage(response.content); // <- Ki·ªÉm tra n·∫øu response.content c√≥ ph·∫£i l√† string kh√¥ng
            } else {
                console.error(
                    "‚ùå API kh√¥ng tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n ·∫£nh h·ª£p l·ªá:",
                    response
                );
            }

            message.success("T·∫£i ·∫£nh l√™n th√†nh c√¥ng!");
        } catch (error) {
            console.error("‚ùå L·ªói khi t·∫£i ·∫£nh l√™n:", error);
            message.error("Kh√¥ng th·ªÉ t·∫£i ·∫£nh l√™n!");
        }
    };

    return (
        <Form
            form={form}
            onFinish={handleSubmit}
            initialValues={location || {}}
        >
            <Form.Item
                name="tenViTri"
                label="T√™n v·ªã tr√≠"
                rules={[
                    { required: true, message: "Vui l√≤ng nh·∫≠p t√™n v·ªã tr√≠!" },
                ]}
            >
                <Input placeholder="Nh·∫≠p t√™n v·ªã tr√≠" />
            </Form.Item>

            <Form.Item
                name="tinhThanh"
                label="T·ªânh th√†nh"
                rules={[
                    { required: true, message: "Vui l√≤ng nh·∫≠p t·ªânh th√†nh!" },
                ]}
            >
                <Input placeholder="Nh·∫≠p t·ªânh th√†nh" />
            </Form.Item>

            <Form.Item
                name="quocGia"
                label="Qu·ªëc gia"
                rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p qu·ªëc gia!" }]}
            >
                <Input placeholder="Nh·∫≠p qu·ªëc gia" />
            </Form.Item>

            <Form.Item label="H√¨nh ·∫£nh">
                <Upload
                    customRequest={handleImageUpload}
                    showUploadList={false}
                >
                    <Button icon={<UploadOutlined />}>T·∫£i ·∫£nh l√™n</Button>
                </Upload>
                {image && (
                    <img
                        src={image}
                        alt="Preview"
                        style={{ marginTop: 10, width: "100%" }}
                    />
                )}
            </Form.Item>

            <Button
                type="primary"
                htmlType="submit"
                loading={loading}
                style={{ width: "100%" }}
            >
                {location ? "C·∫≠p nh·∫≠t" : "Th√™m m·ªõi"}
            </Button>
        </Form>
    );
};

export default ViTriForm;
